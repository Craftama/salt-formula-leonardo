{%- from "linux/map.jinja" import network with context %}
{%- set service = salt['pillar.get']('supervisor:server:service:'+service_name) %}
{%- set app = salt['pillar.get']('leonardo:server:app:'+service.name) %}

{% if app.server_engine is not defined or app.server_engine == 'gunicorn' %}

[program:{{ service.type }}_{{ service.name }}]
command=/srv/leonardo/sites/{{ service.name }}/bin/gunicorn_start
{%- if network.proxy is defined and network.proxy.port is defined %}
environment=http_proxy='http://{{ network.proxy.host }}:{{ network.proxy.port }}/',https_proxy='http://{{ network.proxy.host }}:{{ network.proxy.port }}/',no_proxy="{{ network.proxy.no_proxy|default('localhost,127.0.0.1,localaddress,.localdomain.com') }}"
{%- endif %}
stdout_logfile=/srv/leonardo/sites/{{ service.name }}/logs/access.log 
stderr_logfile=/srv/leonardo/sites/{{ service.name }}/error.log
user=leonardo
autostart=true
autorestart=true

{% elif app.server_engine is defined or app.server_engine == 'daphne' %}

[program:{{ service.type }}_{{ service.name }}_web_interface]
directory=/srv/leonardo/sites/{{ service.name }}
command=/srv/leonardo/sites/{{ service.name }}/bin/daphne -p {{ app.bind.port }} -b {{ app.bind.get("host", 'localhost') }} asgi:channel_layer
{%- if network.proxy is defined and network.proxy.port is defined %}
environment=http_proxy='http://{{ network.proxy.host }}:{{ network.proxy.port }}/',https_proxy='http://{{ network.proxy.host }}:{{ network.proxy.port }}/',no_proxy="{{ network.proxy.no_proxy|default('localhost,127.0.0.1,localaddress,.localdomain.com') }}"
{%- endif %}
stdout_logfile=/srv/leonardo/sites/{{ service.name }}/logs/access.log 
stderr_logfile=/srv/leonardo/sites/{{ service.name }}/error.log
user=leonardo
autostart=true
autorestart=true

{% for i in range(0, app.get('workers', 1)) %}
[program:{{ service.type }}_{{ service.name }}_web_worker_{{ i }}]
command=/srv/leonardo/sites/{{ service.name }}/bin/python /srv/leonardo/sites/{{ service.name }}/manage.py runworker
{%- if network.proxy is defined and network.proxy.port is defined %}
environment=http_proxy='http://{{ network.proxy.host }}:{{ network.proxy.port }}/',https_proxy='http://{{ network.proxy.host }}:{{ network.proxy.port }}/',no_proxy="{{ network.proxy.no_proxy|default('localhost,127.0.0.1,localaddress,.localdomain.com') }}"
{%- endif %}
stdout_logfile=/srv/leonardo/sites/{{ service.name }}/logs/access.log 
stderr_logfile=/srv/leonardo/sites/{{ service.name }}/error.log
user=leonardo
autostart=true
autorestart=true
{% endfor %}

{% endif %}

{% if app.worker is defined and app.worker %}

[program:{{ service.type }}_{{ service.name }}_beat]
directory=/srv/leonardo/sites/{{ service.name }}
command=/srv/leonardo/sites/{{ service.name }}/bin/python /srv/leonardo/sites/{{ service.name }}/manage.py celery beat --loglevel=info
stdout_logfile=/srv/leonardo/sites/{{ service.name }}/logs/worker.log
stderr_logfile=/srv/leonardo/sites/{{ service.name }}/worker_error.log
user=leonardo
autostart=true
autorestart=true

[program:{{ service.type }}_{{ service.name }}_worker]
directory=/srv/leonardo/sites/{{ service.name }}
command=/srv/leonardo/sites/{{ service.name }}/bin/python /srv/leonardo/sites/{{ service.name }}/manage.py celery worker -E -Q {{ service.name }} --hostname={{ service.name }}@{{ pillar.linux.system.name }}.{{ pillar.linux.system.domain }} --loglevel=info
{%- if network.proxy is defined and network.proxy.port is defined %}
environment=http_proxy='http://{{ network.proxy.host }}:{{ network.proxy.port }}/',https_proxy='http://{{ network.proxy.host }}:{{ network.proxy.port }}/',no_proxy="{{ network.proxy.no_proxy|default('localhost,127.0.0.1,localaddress,.localdomain.com') }}"
{%- endif %}
stdout_logfile=/srv/leonardo/sites/{{ service.name }}/logs/worker.log 
stderr_logfile=/srv/leonardo/sites/{{ service.name }}/worker_error.log
user=leonardo
autostart=true
autorestart=true

#[program:{{ service.type }}_{{ service.name }}_celerycam]
#directory=/srv/leonardo/sites/{{ service.name }}
#command=/srv/leonardo/sites/{{ service.name }}/bin/python /srv/leonardo/sites/{{ service.name }}/manage.py celerycam
#stdout_logfile=/srv/leonardo/sites/{{ service.name }}/logs/celerycam.log 
#stderr_logfile=/srv/leonardo/sites/{{ service.name }}/celerycam_error.log
#user=leonardo
#autostart=true
#autorestart=true

{% endif %}
